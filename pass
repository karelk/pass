#!/bin/sh

########################################################################################################################
########################################################################################################################
########################################################################################################################

 case "$PWD" in
    ($HOME/passwords/*)
	PASS_DIR="$PWD"
	;;
    (*)
	PASS_DIR="$HOME/passwords"
	;;
 esac

 cd "$PASS_DIR" || exit 1

########################################################################################################################
########################################################################################################################
########################################################################################################################

insert=
edit=
pattern=
list_dir=

########################################################################################################################
########################################################################################################################
########################################################################################################################

# Ensure that debug mode is never enabled to prevent the password from leaking.
set +x

# Ensure that globbing is globally disabled to avoid insecurities with word-splitting.
set -f

# Set 'GPG_TTY' to the current 'TTY' if it is unset. Fixes a somewhat rare `gpg` issue.
# export GPG_TTY=${GPG_TTY:-$(tty)}

# Restrict permissions of any new files to only the current user.
umask 077

# Ensure that we leave the terminal in a usable state on exit or Ctrl+C.
trap 'stty echo icanon' INT EXIT

########################################################################################################################
########################################################################################################################
########################################################################################################################

 while [ $# -gt 0 ] ; do

    case "$1" in
	(--insert) 
	    insert="y"
	    ;;
	(--edit)
	    edit="y"
	    ;;
	(-P)
	    if [ -n "$2" ] ; then
		pattern="$2"
		shift
	    else
		printf "\n\e[1;31m Error:\e[0m -P needs an argument\n\n" >&2
		exit 1
	    fi
	    ;;
	(-d)
	    list_dir="y"
	    ;;
	(-?*)
	    printf "\n\e[1;31m Error:\e[0m Unknown option: $1\n\n" >&2
	    exit 1
	    ;;
	(*)
	    if [ -z "$f" ] ; then
		f="$1"
	    else
		printf "\n\e[1;31m Error:\e[0m too many arguments: $f $1\n\n" >&2
		exit 1
	    fi
	    ;;
    esac

    shift

 done

########################################################################################################################
########################################################################################################################
########################################################################################################################

 if [ -n "$list_dir" ] ; then
    tree -d -F -C -l --dirsfirst --noreport $f | tail -n +2
    exit 0
 elif [ -n "$pattern" ] ; then
    tree -F -C -l --dirsfirst --noreport --ignore-case --prune -P "*${pattern}*" $f | tail -n +2 | sed 's/\.gpg\x1b\[00m$/\x1b\[00m/'
    exit 0
 fi

########################################################################################################################
########################################################################################################################
########################################################################################################################

 if [ -n "$f" ] ; then

    ####################################################################################################################
    if [ -n "$insert" ] ; then #########################################################################################
    ####################################################################################################################

	if [ -f "$f.gpg" ] ; then
	    printf "\n\e[1;31m Error:\e[0m Pass file '$f' already exists\n" >&2
	    exit 1
	else

	    case $f in
		(/*)
		    printf "\n\e[1;31m Error:\e[0m Category cannot start with '/'\n" >&2
		    exit 1
		    ;;
		(*../*)
		    printf "\n\e[1;31m Error:\e[0m Category went out of bounds\n" >&2
		    exit 1
		    ;;
		(*/*)
		    if ! mkdir -p "${f%/*}" ; then
			printf "\n\e[1;31m Error:\e[0m Couldn't create Category '${f%/*}'\n" >&2
			exit 1
		    fi
		    ;;
	    esac

	    mkdir -p "$HOME/.cache/pass"

	    tmp_file="$(mktemp -u --tmpdir=$HOME/.cache/pass XXXXXXXXXXXXXXXXXX.txt)"

	    joe -syntax conf --joe_state $tmp_file

	    gpg --armor --encrypt -o "${f}.gpg" $tmp_file

	    rm $tmp_file

	    printf "\e[0;32mSaved '${f}' to the store.\e[0m\n"

	fi

    ####################################################################################################################
    elif [ -n "$edit" ] ; then #########################################################################################
    ####################################################################################################################

	if [ ! -f "$f.gpg" ] ; then
	    printf "\n\e[1;31m Error:\e[0m Pass file '$f' doesn't exists\n" >&2
	    exit 1
	else

	    mkdir -p "$HOME/.cache/pass"

	    tmp_file="$(mktemp -u --tmpdir=$HOME/.cache/pass XXXXXXXXXXXXXXXXXX.txt)"

	    gpg --decrypt --quiet --pinentry-mode=loopback -o $tmp_file "${f}.gpg"

	    joe -syntax conf --joe_state $tmp_file

	    gpg --yes --armor --encrypt -o "${f}.gpg" $tmp_file

	    rm $tmp_file

	    printf "\e[0;32mSaved '${f}' to the store.\e[0m\n"

	fi

    ####################################################################################################################
    else ###############################################################################################################
    ####################################################################################################################

	if [ -d "$f" ] ; then
	    tree -F -C -l --dirsfirst --noreport "$f" | tail -n +2 | sed 's/\.gpg\x1b\[00m$/\x1b\[00m/'
	elif [ -f "$f.gpg" ] ; then
	    gpg --decrypt --quiet --pinentry-mode=loopback "$f.gpg" | grcat conf.pass
	else
	    printf "\n\e[1;31m Error:\e[0m Pass file doesn't exist: $f\n\n" >&2
	    exit 1
	fi

    ####################################################################################################################
    fi #################################################################################################################
    ####################################################################################################################

 else
    tree -F -C -l --dirsfirst --noreport | tail -n +2 | sed 's/\.gpg\x1b\[00m$/\x1b\[00m/'
 fi

########################################################################################################################
########################################################################################################################
########################################################################################################################

